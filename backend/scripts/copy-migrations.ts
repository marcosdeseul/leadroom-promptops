#!/usr/bin/env tsx

/**
 * Copy Drizzle-generated migrations to Supabase migrations directory
 * 
 * This script reads SQL files from drizzle/ directory (generated by Drizzle)
 * and copies them to supabase/migrations/ with proper timestamp prefixing.
 * 
 * Drizzle generates complete SQL including:
 * - Table definitions
 * - Constraints and indexes
 * - RLS policies (from pgPolicy in schema)
 * - .enableRLS() activation
 * 
 * This script just copies the files - no SQL modification needed.
 */

import * as fs from 'fs';
import * as path from 'path';

const DRIZZLE_DIR = path.join(process.cwd(), 'drizzle');
const SUPABASE_MIGRATIONS_DIR = path.join(process.cwd(), 'supabase', 'migrations');

function getTimestamp(): string {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  const seconds = String(now.getSeconds()).padStart(2, '0');
  const milliseconds = String(now.getMilliseconds()).padStart(3, '0');

  return `${year}${month}${day}${hours}${minutes}${seconds}${milliseconds}`;
}

function copyMigrations(): void {
  // Ensure supabase/migrations directory exists
  if (!fs.existsSync(SUPABASE_MIGRATIONS_DIR)) {
    fs.mkdirSync(SUPABASE_MIGRATIONS_DIR, { recursive: true });
    console.log(`Created directory: ${SUPABASE_MIGRATIONS_DIR}`);
  }

  // Check if drizzle directory exists
  if (!fs.existsSync(DRIZZLE_DIR)) {
    console.error(`Error: Drizzle directory not found at ${DRIZZLE_DIR}`);
    console.error('Run "npm run db:generate" first to generate migrations.');
    process.exit(1);
  }

  // Read all SQL files from drizzle directory
  const files = fs.readdirSync(DRIZZLE_DIR)
    .filter(file => file.endsWith('.sql'))
    .sort(); // Process in order

  if (files.length === 0) {
    console.log('No migration files found in drizzle/ directory.');
    console.log('Run "npm run db:generate" first to generate migrations.');
    return;
  }

  let counter = 0;

  for (const file of files) {
    const timestamp = getTimestamp(); // Generate unique timestamp per file
    const sourcePath = path.join(DRIZZLE_DIR, file);
    const content = fs.readFileSync(sourcePath, 'utf-8');

    // Generate new filename with timestamp
    // Format: YYYYMMDDHHMMSSmmm_counter_original_name.sql
    const newFilename = `${timestamp}_${String(counter).padStart(4, '0')}_${file}`;
    const destPath = path.join(SUPABASE_MIGRATIONS_DIR, newFilename);

    // Copy file
    fs.writeFileSync(destPath, content, 'utf-8');
    console.log(`✓ Copied: ${file} → ${newFilename}`);

    counter++;
  }

  console.log(`\n✅ Successfully copied ${files.length} migration(s) to supabase/migrations/`);
  console.log('\nNext steps:');
  console.log('  1. Review migrations in supabase/migrations/');
  console.log('  2. Run: supabase db reset --local');
}

// Run the script
try {
  copyMigrations();
} catch (error) {
  console.error('Error copying migrations:', error);
  process.exit(1);
}
